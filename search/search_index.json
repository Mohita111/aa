{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Docs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-docs","text":"For full documentation visit mkdocs.org .","title":"Welcome to Docs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Augmented%20Reality/","text":"Augmented Reality (AR) in Python AR(Augmented Reality) is a system that combines the real and virtual worlds. Have you ever played \"Pokemon Go\"? If you are not aware of the game, the player has to turn on the camera and roam around places to find a 3D pokemon placed somewhere randomly in the virtual-real world on the console of the app. The player with the highest collection of pokemons wins. The concept that the player is able to see a virtual cartoon character in the real world in the game is AR(Augmented Reality). The game uses location tracking and geographical mapping and runs on AR technology. It creates a view of virtual objects in the real world . There is another technology called \"Virtual Reality\". AR and VR are not the same . Virtual reality is \"virtual world made real\" but Augmented reality is combining virtual objects with the real world. VR is about 75 percent virtual but AR is only 25 percent virtual . The difference between AR and VR can be well understood with examples. Playing games with VR headset makes the player involve in a virtual world while playing AR games involves virtual world into real world locations. There are two major goals for AR technology: Real-time interaction Accurate 3D representation of real and virtual objects. This tutorial gives a brief idea of AR using the OpenCV library in Python. Using the available functionality in Python, we'll try to implement some interesting AR ideas. How does a Computer Read an Image? A computer doesn't have the capability of recognizing images by its own. An image is a collection of pixels or picture elements. When we say \" My TV's resolution is 1080p \", we mean that the height*width ratio of the screen is 3840*2160 which means, the TV screen has over 8 million pixels. A pixel is like a small dot measuring about 0.26mm or 1/96 of an inch (varies). The computer can only recognize numbers. Hence, every pixel is represented using different color models. Most commonly used color models are RGB (Red green blue) and CMYK (Cyan Magenta Yellow Black) . RGB model: To represent a black and white image , each pixel is given a single number that represents the amount of light (contrast). The number ranges from 0 to 255. 0 represents no light ( black ) and 255 represents full light ( white ) and the numbers in the interval represent various shades of grey. To represent a color image in RGB model, every pixel is given 3 values each representing the amount of Red, green and blue colors in the pixel respectively. Processing Images with OpenCV library In the vast libraries of Python, OpenCV is one of the notable ones. It is a huge open source library that is used a lot for computer vision, machine learning applications . Using this library, we can process images and even videos. To process an image, every pixel is stored as a tuple of (B, G, R) values. There are various functions in OpenCV for processing images. Here are some basic functions: py **import** cv2 pic = cv2.imread(r\"C:\\\\Users\\\\Jeevani\\\\Desktop\\\\6946b76fed14793869229898fc827e43.png\") ### Displaying the image py print ('The picture we\\\\'re working on:') cv2.imshow('Multiverse spidey', pic) cv2.waitKey(0) Get image size and color model py dim = pic.shape print('\\\\nHeight: {}'.format(dim\\[0\\])) print('Width: {}'.format(dim\\[1\\])) print('Number of channels: {}'.format(dim\\[2\\])) BGR intensities in a pixel py (blue, green, red) = pic\\[599, 499\\] **print**(\"\\\\nNo-of blue channels:\", blue) **print**(\"No-of green channels:\", green) **print**(\"No-of red channels:\", red) Focusing on a region in the picture py **print**('\\\\nSelecting a region in the image:') region = pic\\[200: 600, 300 : 600\\] cv2.imshow('Multiverse spidey', region) cv2.waitKey(0) Resizing the image py **print**(\"\\\\nResizing the image to half by maintaining the aspect ratio:\") ratio = 50 h = int(dim\\[0\\]\\*ratio/100) w = int(dim\\[1\\]\\*ratio/100) size = (h,w) crop = cv2.resize(pic, size) cv2.imshow('Multiverse spidey', crop) cv2.waitKey(0) Rotating the image py **print**(\"\\\\nRotating the image by 60 degree clockwise:\") h = int(dim\\[0\\]) w = int(dim\\[1\\]) center = (h//2, w//2) mat = cv2.getRotationMatrix2D(center, -60, 1) ro\\_pic = cv2.warpAffine(pic, mat, (h, w)) cv2.imshow('Multiverse spidey', ro\\_pic) cv2.waitKey(0) Output: The picture we're working on: Height: 621 Width: 500 Number of channels: 3 No-of blue channels: 12 No-of green channels: 12 No-of red channels: 12","title":"Augmented Reality"},{"location":"Augmented%20Reality/#augmented-reality-ar-in-python","text":"AR(Augmented Reality) is a system that combines the real and virtual worlds. Have you ever played \"Pokemon Go\"? If you are not aware of the game, the player has to turn on the camera and roam around places to find a 3D pokemon placed somewhere randomly in the virtual-real world on the console of the app. The player with the highest collection of pokemons wins. The concept that the player is able to see a virtual cartoon character in the real world in the game is AR(Augmented Reality). The game uses location tracking and geographical mapping and runs on AR technology. It creates a view of virtual objects in the real world . There is another technology called \"Virtual Reality\". AR and VR are not the same . Virtual reality is \"virtual world made real\" but Augmented reality is combining virtual objects with the real world. VR is about 75 percent virtual but AR is only 25 percent virtual . The difference between AR and VR can be well understood with examples. Playing games with VR headset makes the player involve in a virtual world while playing AR games involves virtual world into real world locations. There are two major goals for AR technology: Real-time interaction Accurate 3D representation of real and virtual objects. This tutorial gives a brief idea of AR using the OpenCV library in Python. Using the available functionality in Python, we'll try to implement some interesting AR ideas.","title":"Augmented Reality (AR) in Python"},{"location":"Augmented%20Reality/#how-does-a-computer-read-an-image","text":"A computer doesn't have the capability of recognizing images by its own. An image is a collection of pixels or picture elements. When we say \" My TV's resolution is 1080p \", we mean that the height*width ratio of the screen is 3840*2160 which means, the TV screen has over 8 million pixels. A pixel is like a small dot measuring about 0.26mm or 1/96 of an inch (varies). The computer can only recognize numbers. Hence, every pixel is represented using different color models. Most commonly used color models are RGB (Red green blue) and CMYK (Cyan Magenta Yellow Black) .","title":"How does a Computer Read an Image?"},{"location":"Augmented%20Reality/#rgb-model","text":"To represent a black and white image , each pixel is given a single number that represents the amount of light (contrast). The number ranges from 0 to 255. 0 represents no light ( black ) and 255 represents full light ( white ) and the numbers in the interval represent various shades of grey. To represent a color image in RGB model, every pixel is given 3 values each representing the amount of Red, green and blue colors in the pixel respectively.","title":"RGB model:"},{"location":"Augmented%20Reality/#_1","text":"","title":""},{"location":"Augmented%20Reality/#processing-images-with-opencv-library","text":"In the vast libraries of Python, OpenCV is one of the notable ones. It is a huge open source library that is used a lot for computer vision, machine learning applications . Using this library, we can process images and even videos. To process an image, every pixel is stored as a tuple of (B, G, R) values. There are various functions in OpenCV for processing images. Here are some basic functions: py **import** cv2 pic = cv2.imread(r\"C:\\\\Users\\\\Jeevani\\\\Desktop\\\\6946b76fed14793869229898fc827e43.png\") ### Displaying the image py print ('The picture we\\\\'re working on:') cv2.imshow('Multiverse spidey', pic) cv2.waitKey(0)","title":"Processing Images with OpenCV library"},{"location":"Augmented%20Reality/#get-image-size-and-color-model","text":"py dim = pic.shape print('\\\\nHeight: {}'.format(dim\\[0\\])) print('Width: {}'.format(dim\\[1\\])) print('Number of channels: {}'.format(dim\\[2\\]))","title":"Get image size and color model"},{"location":"Augmented%20Reality/#bgr-intensities-in-a-pixel","text":"py (blue, green, red) = pic\\[599, 499\\] **print**(\"\\\\nNo-of blue channels:\", blue) **print**(\"No-of green channels:\", green) **print**(\"No-of red channels:\", red)","title":"BGR intensities in a pixel"},{"location":"Augmented%20Reality/#focusing-on-a-region-in-the-picture","text":"py **print**('\\\\nSelecting a region in the image:') region = pic\\[200: 600, 300 : 600\\] cv2.imshow('Multiverse spidey', region) cv2.waitKey(0)","title":"Focusing on a region in the picture"},{"location":"Augmented%20Reality/#resizing-the-image","text":"py **print**(\"\\\\nResizing the image to half by maintaining the aspect ratio:\") ratio = 50 h = int(dim\\[0\\]\\*ratio/100) w = int(dim\\[1\\]\\*ratio/100) size = (h,w) crop = cv2.resize(pic, size) cv2.imshow('Multiverse spidey', crop) cv2.waitKey(0)","title":"Resizing the image"},{"location":"Augmented%20Reality/#rotating-the-image","text":"py **print**(\"\\\\nRotating the image by 60 degree clockwise:\") h = int(dim\\[0\\]) w = int(dim\\[1\\]) center = (h//2, w//2) mat = cv2.getRotationMatrix2D(center, -60, 1) ro\\_pic = cv2.warpAffine(pic, mat, (h, w)) cv2.imshow('Multiverse spidey', ro\\_pic) cv2.waitKey(0) Output: The picture we're working on: Height: 621 Width: 500 Number of channels: 3 No-of blue channels: 12 No-of green channels: 12 No-of red channels: 12","title":"Rotating the image"},{"location":"Chapter_1.1/","text":"Rename the File to Use the .md Extension Navigate to the /docs folder where the file is located. Rename the file to remove the .txt extension, keeping only .md: mv docs/Chapter_1.md.txt docs/Chapter_1.md","title":"Chapter 2"},{"location":"Chapter_1.1/#rename-the-file-to-use-the-md-extension","text":"","title":"Rename the File to Use the .md Extension"},{"location":"Chapter_1.1/#navigate-to-the-docs-folder-where-the-file-is-located","text":"Rename the file to remove the .txt extension, keeping only .md: mv docs/Chapter_1.md.txt docs/Chapter_1.md","title":"Navigate to the /docs folder where the file is located."},{"location":"Chapter_1/","text":"Navigate to the Docs Folder: In your project, there will be a folder named docs. This is where all your documentation files (usually in Markdown format) are stored. Open the docs folder in VS Code . # Python Program to find the area of triangle a = 5 b = 6 c = 7 # Uncomment below to take inputs from the user # a = float(input('Enter first side: ')) # b = float(input('Enter second side: ')) # c = float(input('Enter third side: ')) # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print('The area of the triangle is %0.2f' %area)","title":"Chapter 1"},{"location":"Chapter_1/#navigate-to-the-docs-folder","text":"","title":"Navigate to the Docs Folder:"},{"location":"Chapter_1/#in-your-project-there-will-be-a-folder-named-docs-this-is-where-all-your-documentation-files-usually-in-markdown-format-are-stored","text":"Open the docs folder in VS Code . # Python Program to find the area of triangle a = 5 b = 6 c = 7 # Uncomment below to take inputs from the user # a = float(input('Enter first side: ')) # b = float(input('Enter second side: ')) # c = float(input('Enter third side: ')) # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print('The area of the triangle is %0.2f' %area)","title":"In your project, there will be a folder named docs. This is where all your documentation files (usually in Markdown format) are stored."}]}